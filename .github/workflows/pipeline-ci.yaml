name: Tests CI

on:
  push:
    branches:
      - main
      - 213-tasktestes-configurar-testes-est√°ticos-com-linter
  pull_request:
    branches:
      - main
  #workflow_dispatch:
    # Permite que o workflow seja disparado manualmente
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432

      redis:
        image: redis
        ports:
          - 6379:6379

    env:
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_RESULT_BACKEND: redis://localhost:6379/0
      PYTHONPATH: ${{ github.workspace }}/API  # Caminho para o diret√≥rio API
      DJANGO_SETTINGS_MODULE: AcheiUnB.settings  # Ajustado para o m√≥dulo correto
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r API/requirements.txt
          pip install coverage
          pip install black ruff  # Garantir que black e ruff est√£o instalados

      - name: Run migrations
        run: python API/manage.py migrate

      - name: Run Black (formata√ß√£o)
        run: black --check API/

      - name: Run Ruff (linting)
        run: ruff check API/

      - name: Post comment on PR if linting fails
        if: failure() && github.event_name == 'pull_request' # Adicionado condi√ß√£o para PRs
        uses: mshick/add-pr-comment@v2
        with:
          message: |
             ‚ùå **O c√≥digo n√£o passou na formata√ß√£o e linting!**

             Por favor, corrija os problemas antes de fazer push novamente:

             üñäÔ∏è **Formata√ß√£o:** Rode `black .`
             üîç **Linting:** Rode `ruff check --fix .`

             Depois de corrigir, fa√ßa `git add .`, `git commit -m "Corrigindo lint"` e `git push`.

      - name: Run tests with coverage
        run: |
          coverage run -m pytest
          coverage report -m
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
    continue-on-error: true # Permite que o job 'test' n√£o quebre a pipeline, mesmo que falhe.         

  security-scan:
    runs-on: ubuntu-latest
    needs: test # Garante que o est√°gio de seguran√ßa s√≥ roda ap√≥s os testes (mesmo que com continue-on-error)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Atualizado para v4

      - name: Set up Python for security scan
        uses: actions/setup-python@v4 # Atualizado para v4
        with:
          python-version: '3.10' # Use a mesma vers√£o do Python do est√°gio de teste

      - name: Install security scanners (Bandit & Safety CLI)
        run: |
          pip install --upgrade pip
          pip install bandit safety # Instala ambos os scanners diretamente

      - name: Install project dependencies for Safety CLI (if not already done)
        run: |
          pip install -r API/requirements.txt # Garante que as depend√™ncias do projeto est√£o no ambiente para o Safety CLI

      - name: Run Bandit (SAST)
        run: |
          # O Bandit gera o relat√≥rio HTML no diret√≥rio raiz do workspace
          bandit -r API/ -f html -o bandit_security_report.html
          echo "Bandit scan completed. Report generated at bandit_security_report.html"
        continue-on-error: true # Permite que o workflow continue mesmo se o Bandit encontrar issues e retornar um c√≥digo de erro

      # Removidos os passos de debug de rede e autentica√ß√£o para manter o workflow limpo,
      # pois j√° cumpriram sua fun√ß√£o de diagn√≥stico e as solu√ß√µes foram implementadas.

      - name: Run Safety CLI (SCA)
        env:
          # √â crucial que o Safety CLI possa autenticar.
          # A chave de API √© a forma de autentica√ß√£o sem intera√ß√£o no navegador.
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }} # Segredo configurado no GitHub Actions
        run: |
          # Este √© o comando corrigido e final para o Safety CLI:
          # -r API/requirements.txt: L√™ as depend√™ncias do seu arquivo.
          # --full-report: Gera um relat√≥rio completo.
          # --output-format html: Formata a sa√≠da como HTML.
          # --ci: ESSENCIAL para rodar em CI (desativa prompts interativos, como o de link de codebase).
          # > safety_security_report.html: Redireciona a sa√≠da HTML para o arquivo.
          safety scan -r API/requirements.txt --full-report --output-format html --ci > safety_security_report.html
          echo "Safety CLI scan completed. Report generated at safety_security_report.html"
        continue-on-error: true # Permite que o workflow continue mesmo se o Safety encontrar issues e retornar um c√≥digo de erro

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4 # Atualizado para v4
        with:
          name: security-reports
          path: |
            bandit_security_report.html
            safety_security_report.html # Este arquivo agora ser√° gerado corretamente
          retention-days: 5 # Define por quantos dias os artefatos ser√£o mantidos